/*
 * $Id $
 *
 * Copyright 2005 Sun Microsystems
 *
 * Initially developed by Antonio Vieiro (vieiro@dev.java.net).
 *
 * This software is released under the Common Development and Distribution
 *  License, version 1.0. See http://www.opensource.org/licenses/cddl1.php
 *  for details.
 *
 * This software is distributed on an "AS IS" basis, without warranty of any
 *  kind, either express or implied.
 *
 * All this stuff basically means that you can use this source code in your
 *  software, either proprietary or not. See 
 *  http://www.opensolaris.org/os/about/faq/licensing_faq/ for interesting
 *  information about the CDDL license.
 *
 */
package org.jdesktop.swingworker.demos.mandelbrot.view.config;

import java.awt.Font;
import org.jdesktop.swingworker.demos.mandelbrot.model.ConfigurationModel;

/**
 * ConfigurationDialog allows the user to modify configuration parameters.
 * @author Antonio Vieiro (vieiro@dev.java.net)  $Author$
 * @version $Revision: $
 */
public class ConfigurationDialog extends javax.swing.JDialog
{
  private ConfigurationModel configurationModel;
  
  /** Creates new form ConfigurationDialog */
  public ConfigurationDialog(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();
    Font currentFont = lblLevelDetail.getFont();
    int currentFontSize = currentFont.getSize();
    Font boldBigFont = lblLevelDetail.getFont().deriveFont( Font.BOLD, currentFontSize*1.2f );
    
    lblLevelDetail.setFont( boldBigFont );
    lblParallelTasks.setFont( boldBigFont );
    
    getRootPane().setDefaultButton( cmdOK );
  }
  
  public void setModel( ConfigurationModel aModel )
  {
    configurationModel = new ConfigurationModel( aModel );
    selDetailLevel.setValue( configurationModel.getDetailLevel() );
    optOne.setSelected( false );
    optFour.setSelected( false );
    optSixteen.setSelected( false );
    switch(  configurationModel.getParallelizationRate() )
    {
      case 1:
        optOne.setSelected( true );
        break;
      case 4:
        optFour.setSelected( true );
        break;
      default:
        optSixteen.setSelected( true );
        break;
    }
  }
  
  /**
   * Returns the configuration data, or null if the user
   *  has pressed the cancel button.
   */
  public ConfigurationModel getModel()
  {
    return configurationModel;
  }
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        cmdGroupTasks = new javax.swing.ButtonGroup();
        lblLevelDetail = new javax.swing.JLabel();
        lblLowDetail = new javax.swing.JLabel();
        selDetailLevel = new javax.swing.JSlider();
        lblHighDetail = new javax.swing.JLabel();
        lblParallelTasks = new javax.swing.JLabel();
        pnlParallelTasks = new javax.swing.JPanel();
        optOne = new javax.swing.JRadioButton();
        optFour = new javax.swing.JRadioButton();
        optSixteen = new javax.swing.JRadioButton();
        pnlCommands = new javax.swing.JPanel();
        cmdOK = new javax.swing.JButton();
        cmdCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuration - Mandelbrot Explorer");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        lblLevelDetail.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblLevelDetail.setText("Detail level");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        getContentPane().add(lblLevelDetail, gridBagConstraints);

        lblLowDetail.setText("low (faster)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 12, 6, 6);
        getContentPane().add(lblLowDetail, gridBagConstraints);

        selDetailLevel.setMajorTickSpacing(1000);
        selDetailLevel.setMaximum(5000);
        selDetailLevel.setMinimum(1000);
        selDetailLevel.setMinorTickSpacing(1000);
        selDetailLevel.setPaintLabels(true);
        selDetailLevel.setPaintTicks(true);
        selDetailLevel.setSnapToTicks(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 6);
        getContentPane().add(selDetailLevel, gridBagConstraints);

        lblHighDetail.setText("high (slower)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 6);
        getContentPane().add(lblHighDetail, gridBagConstraints);

        lblParallelTasks.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblParallelTasks.setText("Parallelization rate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 6);
        getContentPane().add(lblParallelTasks, gridBagConstraints);

        pnlParallelTasks.setLayout(new java.awt.GridLayout(1, 0));

        cmdGroupTasks.add(optOne);
        optOne.setText("x1");
        pnlParallelTasks.add(optOne);

        cmdGroupTasks.add(optFour);
        optFour.setSelected(true);
        optFour.setText("x4");
        pnlParallelTasks.add(optFour);

        cmdGroupTasks.add(optSixteen);
        optSixteen.setText("x16");
        pnlParallelTasks.add(optSixteen);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        getContentPane().add(pnlParallelTasks, gridBagConstraints);

        pnlCommands.setLayout(new java.awt.GridBagLayout());

        cmdOK.setText("OK");
        cmdOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOKActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlCommands.add(cmdOK, gridBagConstraints);

        cmdCancel.setText("Cancel");
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        pnlCommands.add(cmdCancel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 6, 6);
        getContentPane().add(pnlCommands, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmdCancelActionPerformed
  {//GEN-HEADEREND:event_cmdCancelActionPerformed

    configurationModel = null;
    setVisible( false );
    
  }//GEN-LAST:event_cmdCancelActionPerformed

  private void cmdOKActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmdOKActionPerformed
  {//GEN-HEADEREND:event_cmdOKActionPerformed

    configurationModel.setDetailLevel( selDetailLevel.getValue() );
    
    if ( optOne.isSelected() )
    {
      configurationModel.setParallelizationRate(1);
    }
    else
    {
      if ( optFour.isSelected() )
      {
        configurationModel.setParallelizationRate(4);
      }
      else
      {
        configurationModel.setParallelizationRate(16);
      }
    }
    setVisible( false );
  }//GEN-LAST:event_cmdOKActionPerformed
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new ConfigurationDialog(new javax.swing.JFrame(), true).setVisible(true);
      }
    });
  }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCancel;
    private javax.swing.ButtonGroup cmdGroupTasks;
    private javax.swing.JButton cmdOK;
    private javax.swing.JLabel lblHighDetail;
    private javax.swing.JLabel lblLevelDetail;
    private javax.swing.JLabel lblLowDetail;
    private javax.swing.JLabel lblParallelTasks;
    private javax.swing.JRadioButton optFour;
    private javax.swing.JRadioButton optOne;
    private javax.swing.JRadioButton optSixteen;
    private javax.swing.JPanel pnlCommands;
    private javax.swing.JPanel pnlParallelTasks;
    private javax.swing.JSlider selDetailLevel;
    // End of variables declaration//GEN-END:variables
  
}
