/*
 * $Id $
 *
 * Copyright 2005 Sun Microsystems
 *
 * Initially developed by Antonio Vieiro (vieiro@dev.java.net).
 *
 * This software is released under the Common Development and Distribution
 *  License, version 1.0. See http://www.opensource.org/licenses/cddl1.php
 *  for details.
 *
 * This software is distributed on an "AS IS" basis, without warranty of any
 *  kind, either express or implied.
 *
 * All this stuff basically means that you can use this source code in your
 *  software, either proprietary or not. See 
 *  http://www.opensolaris.org/os/about/faq/licensing_faq/ for interesting
 *  information about the CDDL license.
 *
 */
package org.jdesktop.swingworker.demos.mandelbrot.view.shiftpane;

import java.awt.Cursor;
import java.awt.Point;
import javax.swing.SwingUtilities;
import javax.swing.event.EventListenerList;

/**
 * ShiftPane is a JPanel that allows the user to move the image.
 * @author Antonio Vieiro (vieiro@dev.java.net)  $Author$
 */
public class ShiftPane extends javax.swing.JPanel
{
  private java.awt.Point initialPoint;
  private java.awt.Point finalPoint;
  private boolean dragging = false;
  private EventListenerList listeners;
  
  /**
   * Creates new form ShiftPane 
   */
  public ShiftPane()
  {
    initComponents();
    setCursor( Cursor.getPredefinedCursor( Cursor.HAND_CURSOR ) );
    listeners = new EventListenerList();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    setLayout(new java.awt.BorderLayout());

    setOpaque(false);
    addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
    {
      public void mouseDragged(java.awt.event.MouseEvent evt)
      {
        formMouseDragged(evt);
      }
    });
    addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mousePressed(java.awt.event.MouseEvent evt)
      {
        formMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt)
      {
        formMouseReleased(evt);
      }
    });

  }
  // </editor-fold>//GEN-END:initComponents

  private void formMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseReleased
  {//GEN-HEADEREND:event_formMouseReleased
    finalPoint = evt.getPoint();
    dragging = false;
    if ( finalPoint != null && initialPoint != null )
    {
      int dx = finalPoint.x - initialPoint.x;
      int dy = finalPoint.y - initialPoint.y;
      Point shift = new Point( dx, dy );
      fireEvent( shift );
    }

  }//GEN-LAST:event_formMouseReleased

  private void fireEvent( Point dxdy )
  {
    final ShiftEvent event = new ShiftEvent( this, dxdy );
    SwingUtilities.invokeLater(
      new Runnable()
    {
      public void run()
      {
        fireEvent( event );
      }
    } );
  }
  
  private void fireEvent( ShiftEvent aShiftEvent )
  {
    ShiftListener [] slisteners = listeners.getListeners( ShiftListener.class );
    for( ShiftListener listener : slisteners )
      listener.componentShifted( aShiftEvent );
  }
  
  private void formMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMousePressed
  {//GEN-HEADEREND:event_formMousePressed
    dragging = true;
    initialPoint = evt.getPoint();
  }//GEN-LAST:event_formMousePressed

  private void formMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseDragged
  {//GEN-HEADEREND:event_formMouseDragged
// TODO add your handling code here:
  }//GEN-LAST:event_formMouseDragged

  public void addShiftListener( ShiftListener aShiftListener )
  {
    listeners.add( ShiftListener.class, aShiftListener );
  }
  
  public void removeShiftListener( ShiftListener aShiftListener )
  {
    listeners.remove( ShiftListener.class, aShiftListener );
  }
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  
}
