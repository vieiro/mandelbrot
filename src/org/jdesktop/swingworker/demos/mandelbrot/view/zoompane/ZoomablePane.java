/*
 * $Id $
 *
 * Copyright 2005 Sun Microsystems
 *
 * Initially developed by Antonio Vieiro (vieiro@dev.java.net).
 *
 * This software is released under the Common Development and Distribution
 *  License, version 1.0. See http://www.opensource.org/licenses/cddl1.php
 *  for details.
 *
 * This software is distributed on an "AS IS" basis, without warranty of any
 *  kind, either express or implied.
 *
 * All this stuff basically means that you can use this source code in your
 *  software, either proprietary or not. See 
 *  http://www.opensolaris.org/os/about/faq/licensing_faq/ for interesting
 *  information about the CDDL license.
 *
 */
package org.jdesktop.swingworker.demos.mandelbrot.view.zoompane;
import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import javax.swing.SwingUtilities;
import javax.swing.event.EventListenerList;

/**
 * ZooomablePane is a panel that allows the user to select a given area.
 * @author Antonio Vieiro (vieiro@dev.java.net)  $Author$
 */
public class ZoomablePane extends javax.swing.JPanel
{
  private static java.awt.BasicStroke DASHED_LINE = new java.awt.BasicStroke( 1.0f, java.awt.BasicStroke.CAP_SQUARE, java.awt.BasicStroke.JOIN_ROUND, 10.0f, new float[]{ 5.0f, 4.0f}, 0.0f );
  private boolean dragging = false;
  private Point initialPoint;
  private Point finalPoint;
  private EventListenerList listeners;
  private Rectangle2D.Double userRegion;
  
  /** Creates new form ZoomablePane */
  public ZoomablePane()
  {
    initComponents();
    listeners = new EventListenerList();
    setCursor( Cursor.getPredefinedCursor( Cursor.CROSSHAIR_CURSOR ) );
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    setLayout(new java.awt.BorderLayout());

    setOpaque(false);
    addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
    {
      public void mouseDragged(java.awt.event.MouseEvent evt)
      {
        formMouseDragged(evt);
      }
    });
    addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        formMouseClicked(evt);
      }
      public void mousePressed(java.awt.event.MouseEvent evt)
      {
        formMousePressed(evt);
      }
      public void mouseReleased(java.awt.event.MouseEvent evt)
      {
        formMouseReleased(evt);
      }
    });

  }
  // </editor-fold>//GEN-END:initComponents
  
  private void formMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseClicked
  {//GEN-HEADEREND:event_formMouseClicked
    
    if( evt.isPopupTrigger() )
    {
      dragging = false;
      repaint();
    }
    
  }//GEN-LAST:event_formMouseClicked
  
  private void formMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseReleased
  {//GEN-HEADEREND:event_formMouseReleased
    repaint();
    if ( dragging && ! evt.isPopupTrigger() && initialPoint != null && finalPoint != null )
    {
      int x = Math.min( initialPoint.x, finalPoint.x );
      int y = Math.min( initialPoint.y, finalPoint.y );
      int ww = Math.abs( finalPoint.x - initialPoint.x );
      int hh = Math.abs( finalPoint.y - initialPoint.y );
      java.awt.Rectangle zoomRect = new java.awt.Rectangle( x, y, ww, hh );
      if ( ww > 2 && hh > 2 )
      {
        fireEvent( zoomRect );
      }
    }
    dragging = false;
    
  }//GEN-LAST:event_formMouseReleased
  
  private void formMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMousePressed
  {//GEN-HEADEREND:event_formMousePressed
    initialPoint = evt.getPoint();
    dragging = true;
  }//GEN-LAST:event_formMousePressed
  
  private void formMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseDragged
  {//GEN-HEADEREND:event_formMouseDragged
    finalPoint = evt.getPoint();
    dragging = true;
    repaint();
  }//GEN-LAST:event_formMouseDragged
  
  public void paintComponent( Graphics g )
  {
    java.awt.Graphics2D g2d = (java.awt.Graphics2D) g;
    java.awt.Stroke originalStroke = g2d.getStroke();
    g2d.setStroke( DASHED_LINE );
    g2d.setRenderingHint( RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON );
    g2d.setRenderingHint( RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON );
    g.setColor( java.awt.Color.WHITE );
    if ( dragging && initialPoint != null && finalPoint != null )
    {
      g.setXORMode(java.awt.Color.BLACK );
      int x = Math.min( initialPoint.x, finalPoint.x );
      int y = Math.min( initialPoint.y, finalPoint.y );
      int ww = Math.abs( finalPoint.x - initialPoint.x );
      int hh = Math.abs( finalPoint.y - initialPoint.y );
      g.drawRect( x, y, ww, hh );
    }
    g2d.setStroke( originalStroke );
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  
  public void addZoomListener( ZoomListener aZoomListener )
  {
    listeners.add( ZoomListener.class, aZoomListener );
  }
  
  public void setUserRegion( Rectangle2D.Double anUserRegion )
  {
    userRegion = anUserRegion;
  }
  
  public void removeZoomListener( ZoomListener aZoomListener )
  {
    listeners.remove( ZoomListener.class, aZoomListener );
  }
  
  private void fireEvent( Rectangle aRectangle )
  {
    final ZoomEvent event = new ZoomEvent( this, aRectangle, userRegion );
    SwingUtilities.invokeLater(
      new Runnable()
    {
      public void run()
      {
        fireEvent( event );
      }
    } );
  }
  
  private void fireEvent( ZoomEvent anEvent )
  {
    ZoomListener[] listeners = this.listeners.getListeners( ZoomListener.class );
    for( ZoomListener listener: listeners )
    {
      listener.zoomRequested( anEvent );
    }
  }
}
